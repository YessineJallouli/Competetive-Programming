#include <bits/stdc++.h>
using namespace std;
#define ll long long

int main() {
    int n,m; cin >> n >> m;
    int grid[n][m];
    int r,c; cin >> r >> c;
    ll pr1[n][m];
    ll pr2[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
            pr1[i][j] = pr2[i][j] = grid[i][j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (i > 0) {
                pr1[i][j]+= pr1[i-1][j];
            }
            if (j > 0) {
                pr1[i][j]+= pr1[i][j-1];
            }
            if (i > 0 && j > 0) {
                pr1[i][j]-= pr1[i-1][j-1];
            }
        }
    }
    ll up[n][m];
    ll down[n][m];
    ll mx1[n][m];
    ll mx2[n][m];
    memset(up, 0, sizeof up);
    memset(down, 0,sizeof down);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            mx1[i][j] = mx2[i][j] = 0;
            int ii = i-c+1;
            int jj = j-r+1;
            ll nb;
            if (ii >= 0 && jj >= 0) {
                nb = pr1[i][j];
                if (ii > 0) {
                    nb-= pr1[ii-1][j];
                }
                if (jj > 0)
                    nb-= pr1[i][jj-1];
                if (ii > 0 && jj > 0) {
                    nb+= pr1[ii-1][jj-1];
                }
                up[i][j] = max(up[i][j], nb);
                mx1[i][j] = nb;
            }
            ii = i-r+1;
            jj = j-c+1;
            if (ii >= 0 && jj >= 0) {
                nb = pr1[i][j];
                if (ii > 0) {
                    nb-= pr1[ii-1][j];
                }
                if (jj > 0)
                    nb-= pr1[i][jj-1];
                if (ii > 0 && jj > 0) {
                    nb+= pr1[ii-1][jj-1];
                }
                up[i][j] = max(up[i][j], nb);
                mx2[i][j] = nb;
            }
        }
    }
    for (int i = n-1; i >= 0; i--) {
        for (int j = m-1; j >= 0; j--) {
            int ii = i+c-1;
            int jj = j+r-1;
            ll nb = 0;
            if (ii < n && jj < m) {
                nb = pr1[ii][jj];
                if (i != 0) {
                    nb-= pr1[i-1][jj];
                }
                if (j != 0)
                    nb-= pr1[ii][j-1];
                if (i != 0 && j != 0) {
                    nb+= pr1[i-1][j-1];
                }
                down[i][j] = max(down[i][j], nb);
            }
            ii = i+r-1;
            jj = j+c-1;
            if (ii < n && jj < m) {
                nb = pr1[ii][jj];
                if (i != 0) {
                    nb-= pr1[i-1][jj];
                }
                if (j != 0)
                    nb-= pr1[ii][j-1];
                if (i != 0 && j != 0) {
                    nb+= pr1[i-1][j-1];
                }
                down[i][j] = max(down[i][j], nb);
            }
        }
    }
    ll dp1[n][m];
    ll dp2[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            dp1[i][j] = up[i][j];
            if (i > 0)
                dp1[i][j] = max(dp1[i][j], dp1[i-1][j]);
            if (j > 0) {
                dp1[i][j] = max(dp1[i][j], dp1[i][j-1]);
            }
            if (i > 0 && j > 0) {
                dp1[i][j] = max(dp1[i-1][j-1], dp1[i][j]);
            }
        }
    }

    ll ans = 0;
    for (int i = n-1; i >= 0; i--) {
        for (int j = m-1; j >= 0; j--) {
            dp2[i][j] = down[i][j];
            if (i != n-1)
                dp2[i][j] = max(dp2[i][j], dp2[i+1][j]);
            if (j != m-1) {
                dp2[i][j] = max(dp2[i][j], dp2[i][j+1]);
            }
            if (i != n-1 && j != m-1) {
                dp2[i][j] = max(dp2[i+1][j+1], dp2[i][j]);
            }
        }
    }
    /*for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << down[i][j] << ' ';
        }
        cout << '\n';
    }
    cout << '\n';*/
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            ll nb = mx1[i][j];
            int ii = i-c;
            int jj = j-r;
            if (ii > 0) {
                ans = max(ans, nb+dp1[ii][m-1]);
            }
            if (jj > 0) {
                ans = max(ans, nb+dp1[n-1][jj]);
            }
            if (j+1 < m) {
                ans = max(ans, nb+dp2[0][j+1]);
            }
            if (i+1 < n) {
                ans = max(ans, nb+dp2[i+1][0]);
            }
            ii = i-r;
            jj = j-c;
            nb = mx2[i][j];
            if (ii > 0) {
                ans = max(ans, nb+dp1[ii][m-1]);
            }
            if (jj > 0) {
                ans = max(ans, nb+dp1[n-1][jj]);
            }
            if (j+1 < m) {
                ans = max(ans, nb+dp2[0][j+1]);
            }
            if (i+1 < n) {
                ans = max(ans, nb+dp2[i+1][0]);
            }
        }
    }
    cout << ans;
}
